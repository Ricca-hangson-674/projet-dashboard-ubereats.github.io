{"version":3,"sources":["views/QRCodeGenerator/qrGenerator.js","views/QRCodeGenerator/PDFNRHcomponent.js","views/discoveryTable/DiscoveryTable.js","configs/variable.js","components/Message.js","components/Loader.js","provider/discoveryTableFetch.js"],"names":["QRGenerator","props","valueString","documentId","id","value","size","bgColor","fgColor","level","includeMargin","PDFNRHcomponent","PDFImageId","styles","StyleSheet","create","page","backgroundColor","display","view","flexDirection","justifyContent","width","QRImage","height","text","color","logoImage","style","allowDangerousPaths","src","document","getElementById","toDataURL","Discoverytable","useState","discoveryTables","setDiscoveryTables","error","setError","visible","setVisible","idQRCode","setIdQRCode","history","useHistory","idRestaurant","useParams","useEffect","a","getDiscoveryTables","resp","status","data","discoverytable","console","log","fetch","deleteFunction","updateDiscoverytable","old","filter","u","_id","edit","idDiscoveryTable","push","Loader","Message","xs","className","sm","onClick","scope","length","map","d","code","onClose","variable","endpointProd","fileName","loading","env","endpointLocal","endpointFront","variant","children","defaultProps","config","headers","endpoint","url","axios","get","message","response","body","mode","post","put"],"mappings":"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","file":"static/js/9.364464a6.chunk.js","sourcesContent":["import React from 'react';\nimport QRCode from 'qrcode.react';\n\nconst QRGenerator = props => {\n  const { valueString, documentId } = props;\n\n  return (\n    <div>\n      <QRCode\n        id={documentId}\n        value={valueString}\n        size={256}\n        bgColor={'#ffffff'}\n        fgColor={'#000000'}\n        level={'H'}\n        includeMargin={true}\n      />\n    </div>\n  );\n};\n\nexport default QRGenerator;\n","import React from 'react'\nimport {\n  Document,\n  Page,\n  Text,\n  Image,\n  View,\n  StyleSheet,\n} from '@react-pdf/renderer'\n\nconst PDFNRHcomponent = (props) => {\n  const { PDFImageId } = props\n\n  const styles = StyleSheet.create({\n    page: {\n      backgroundColor: 'white',\n      display: 'block',\n    },\n    view: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'center',\n      width: '100%',\n    },\n    QRImage: {\n      width: '100%',\n      height: '100%',\n    },\n    text: {\n      color: '#0081C6',\n      size: '11em',\n    },\n    logoImage: {\n      width: '25%',\n      height: '50%',\n    },\n  })\n\n  return (\n    <Document>\n      <Page key={`PageId_${PDFImageId}`} size={'B8'} style={styles.page}>\n        <View style={styles.view}>\n          <Image\n            allowDangerousPaths\n            src={document.getElementById(PDFImageId).toDataURL()}\n            style={styles.QRImage}\n          />\n        </View>\n        <View style={styles.view}>\n          <Text style={styles.text}>Discoverytable</Text>\n        </View>\n      </Page>\n    </Document>\n  )\n}\n\nexport default PDFNRHcomponent\n","import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CTable,\r\n  CTableBody,\r\n  CTableDataCell,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n  CTableRow,\r\n  CButton,\r\n  CButtonGroup,\r\n  CModal,\r\n  CModalHeader,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalTitle,\r\n} from '@coreui/react'\r\n\r\nimport { PDFDownloadLink } from '@react-pdf/renderer';\r\n\r\n// import QRCodeGenerator from '../QRCodeGenerator/QRCodeGenerator'\r\nimport QRGenerator from '../QRCodeGenerator/qrGenerator'\r\nimport PDFNRHcomponent from '../QRCodeGenerator/PDFNRHcomponent'\r\n\r\nimport { variable } from '../../configs/variable'\r\n\r\nimport { useHistory, useParams } from 'react-router-dom'\r\n\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport { Authentification } from '../../components/index'\r\n\r\nimport {\r\n  getDiscoveryTables,\r\n  updateDiscoverytable,\r\n} from '../../provider/discoveryTableFetch'\r\n\r\n// import { variable } from '../../configs/variable'\r\n\r\nconst Discoverytable = () => {\r\n  /** State */\r\n  const [discoveryTables, setDiscoveryTables] = useState(null)\r\n  const [error, setError] = useState(null)\r\n  const [visible, setVisible] = useState(false)\r\n  const [idQRCode, setIdQRCode] = useState(null)\r\n\r\n  /** Hook Route */\r\n  let history = useHistory()\r\n  let { idRestaurant } = useParams()\r\n\r\n  /** Run once, when the component mounts */\r\n  useEffect(() => {\r\n    console.log('Dependency', idRestaurant)\r\n\r\n    async function fetch() {\r\n      const resp = await getDiscoveryTables(idRestaurant)\r\n\r\n      resp?.status\r\n        ? setDiscoveryTables([...resp?.data?.discoverytable])\r\n        : setError(resp?.error)\r\n    }\r\n\r\n    fetch()\r\n  }, [idRestaurant])\r\n\r\n  const deleteFunction = async (id) => {\r\n    const resp = await updateDiscoverytable(idRestaurant, { id }, 'update')\r\n\r\n    if (resp.status) {\r\n      setDiscoveryTables((old) => old.filter((u) => u._id !== id))\r\n    }\r\n  }\r\n\r\n  const edit = (idRestaurant, idDiscoveryTable) => {\r\n    history.push(`/edit-discovery-table/${idRestaurant}?d=${idDiscoveryTable}`)\r\n  }\r\n\r\n  const generateQRCode = (id) => {\r\n    setVisible(true)\r\n    setIdQRCode(id)\r\n  }\r\n  \r\n  const back = () => {\r\n    history.push(`/restaurants`)\r\n  }\r\n\r\n  if (discoveryTables === null) {\r\n    return <Loader />\r\n  }\r\n\r\n  if (error) {\r\n    return <Message> {error}</Message>\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CRow>\r\n        <Authentification />\r\n        <CCol xs={12}>\r\n          <CCard className=\"mb-4\">\r\n            <CCardHeader>\r\n              <CRow>\r\n                <CCol sm={5}>\r\n                  <strong>Listes des DisciveryTables</strong>\r\n                </CCol>\r\n                <CCol sm={7}>\r\n                  <CButtonGroup className=\"float-end me-3\">\r\n                    <CButton\r\n                      color=\"outline-secondary\"\r\n                      className=\"mx-1\"\r\n                      onClick={() => back()}\r\n                    >\r\n                      Retour\r\n                    </CButton>\r\n                    <CButton\r\n                      color=\"outline-secondary\"\r\n                      className=\"mx-0\"\r\n                      onClick={() => edit(idRestaurant, 'default')}\r\n                    >\r\n                      Ajout\r\n                    </CButton>\r\n                  </CButtonGroup>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CTable>\r\n                <CTableHead>\r\n                  <CTableRow>\r\n                    <CTableHeaderCell scope=\"col\">Code</CTableHeaderCell>\r\n                    <CTableHeaderCell scope=\"col\">Actions</CTableHeaderCell>\r\n                  </CTableRow>\r\n                </CTableHead>\r\n                <CTableBody>\r\n                  {discoveryTables.length > 0 ? (\r\n                    discoveryTables.map((d) => (\r\n                      <CTableRow key={d._id}>\r\n                        <CTableDataCell>{d.code}</CTableDataCell>\r\n                        <CTableDataCell>\r\n                          <CButton\r\n                            color={'secondary'}\r\n                            className=\"m-1\"\r\n                            onClick={() => edit(idRestaurant, d._id)}\r\n                          >\r\n                            {' '}\r\n                            Editer{' '}\r\n                          </CButton>\r\n                          <CButton\r\n                            color={'danger'}\r\n                            className=\"m-1\"\r\n                            onClick={() => deleteFunction(d._id)}\r\n                          >\r\n                            {' '}\r\n                            Supprimer{' '}\r\n                          </CButton>\r\n                          <CButton\r\n                            color={'secondary'}\r\n                            onClick={() => generateQRCode(d.code)}\r\n                          >\r\n                            {' '}\r\n                            QR code{' '}\r\n                          </CButton>\r\n                        </CTableDataCell>\r\n                      </CTableRow>\r\n                    ))\r\n                  ) : (\r\n                    <h3>{'NO Items'}</h3>\r\n                  )}\r\n                </CTableBody>\r\n              </CTable>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n\r\n      {/* <CRow>\r\n      <QRCodeGenerator valueStrings={[\"azertty\", \"qsdff\"]} />\r\n      </CRow> */}\r\n\r\n      <CModal size=\"lg\" visible={visible} onClose={() => setVisible(false)}>\r\n        <CModalHeader onClose={() => setVisible(false)}>\r\n          <CModalTitle>QR Code {idQRCode && idQRCode}</CModalTitle>\r\n        </CModalHeader>\r\n        <CModalBody>\r\n          <QRGenerator valueString={`${variable.endpointProd}?discovery-table=${idQRCode}&id=${idRestaurant}`} documentId={idQRCode} />\r\n        </CModalBody>\r\n        <CModalFooter>\r\n          \r\n      <PDFDownloadLink\r\n        document={<PDFNRHcomponent PDFImageId={idQRCode} />}\r\n        fileName={`${idQRCode}.pdf`}\r\n      >\r\n        {({ loading }) =>\r\n          loading ? (\r\n            'Loading document...'\r\n          ) : (\r\n            <CButton\r\n            color={'primary'}\r\n              style={{ 'marginTop': '1rem', 'marginBottom': '2rem' }}\r\n            >\r\n              Download PDF\r\n            </CButton>\r\n          )\r\n        }\r\n      </PDFDownloadLink>\r\n          <CButton color=\"secondary\" onClick={() => setVisible(false)}>\r\n            Close\r\n          </CButton>\r\n        </CModalFooter>\r\n      </CModal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Discoverytable\r\n","export const variable = {\r\n    env: 'prod', // local | prod\r\n    endpointLocal: 'http://127.0.0.1:5059',\r\n    endpointProd:'https://projet-eats-nrh.herokuapp.com',\r\n    endpointFront:'http://localhost:3232',\r\n}","import React from 'react'\r\nimport {CAlert} from '@coreui/react'\r\n\r\nconst Message = ({variant, children}) => {\r\n    return <CAlert color={variant}>\r\n        { children }\r\n    </CAlert>\r\n}\r\n\r\nMessage.defaultProps = {\r\n    variant: 'info'\r\n}\r\n\r\nexport default Message\r\n","import React from 'react'\r\nimport {CSpinner} from '@coreui/react'\r\n\r\nconst Loader = () => {\r\n    return <>\r\n    <CSpinner color=\"primary\" >\r\n        <span className='sr-only'>Loading ...</span>\r\n    </CSpinner>\r\n    </>\r\n}\r\n\r\nexport default Loader","import axios from 'axios'\r\nimport { variable } from '../configs/variable'\r\n\r\nexport const getDiscoveryTables = async (\r\n  idRestaurant = null,\r\n  idDiscoveryTable = null\r\n) => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    }\r\n\r\n    const endpoint =\r\n      variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n    const url = idDiscoveryTable\r\n      ? `${endpoint}/api/restaurants/${idRestaurant}/discoverytable?id=${idDiscoveryTable}`\r\n      : `${endpoint}/api/restaurants/${idRestaurant}/discoverytable`\r\n\r\n    const { data } = await axios.get(`${url}`, config)\r\n\r\n    return { status: true, data }\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message\r\n\r\n    return { status: false, error: message }\r\n  }\r\n}\r\n\r\nexport const updateDiscoverytable = async (\r\n  idRestaurant,\r\n  body,\r\n  mode = 'post'\r\n) => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    }\r\n\r\n    const endpoint =\r\n      variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n    let data = null\r\n\r\n    if (mode === 'post') {\r\n      data = await axios.post(\r\n        `${endpoint}/api/restaurants/${idRestaurant}/discoverytable`,\r\n        body,\r\n        config\r\n      )\r\n    } else if (mode === 'update') {\r\n      data = await axios.put(\r\n        `${endpoint}/api/restaurants/${idRestaurant}/discoverytable`,\r\n        body,\r\n        config\r\n      )\r\n    }\r\n\r\n    console.log('data', data)\r\n\r\n    return { status: true, data }\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message\r\n\r\n    return { status: false, error: message }\r\n  }\r\n}\r\n"],"sourceRoot":""}