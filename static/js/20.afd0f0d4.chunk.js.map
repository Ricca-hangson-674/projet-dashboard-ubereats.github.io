{"version":3,"sources":["configs/variable.js","components/Message.js","components/Loader.js","provider/orderFetch.js","views/commandes/DetailCommande.js"],"names":["variable","env","endpointLocal","endpointProd","Message","variant","children","color","defaultProps","Loader","className","getOrders","a","id","status","config","headers","endpoint","url","axios","get","data","message","response","error","DetailCommande","useParams","history","useHistory","useState","order","setOrder","setError","useEffect","resp","console","log","fetch","xs","sm","onClick","push","numero","firstName","lastName","email","createdAt","scope","items","length","map","item","name","price","quantity","_id","shippingAddress","address","city","zipCode","country","latitude","longitude"],"mappings":"iJAAA,kCAAO,IAAMA,EAAW,CACpBC,IAAK,OACLC,cAAe,wBACfC,aAAa,0C,iCCHjB,uBAGMC,EAAU,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,SACvB,OAAO,cAAC,IAAD,CAAQC,MAAOF,EAAf,SACDC,KAIVF,EAAQI,aAAe,CACnBH,QAAS,QAGED,O,iCCbf,uBAWeK,IARA,WACX,OAAO,mCACP,cAAC,IAAD,CAAUF,MAAM,UAAhB,SACI,sBAAMG,UAAU,UAAhB,+B,6HCHKC,EAAS,uCAAG,sDAAAC,EAAA,6DAAOC,EAAP,+BAAY,KAAMC,EAAlB,+BAA2B,KAA3B,SAGXC,EAAS,CACXC,QAAS,CACL,eAAgB,qBAIlBC,EAA4B,UAAjBjB,IAASC,IAAkBD,IAASE,cAAgBF,IAASG,aAE1Ee,EAAM,KAGNA,EADAL,EACG,UAAMI,EAAN,uBAA6BJ,GACzBC,EACJ,UAAMG,EAAN,8BAAoCH,GAEpC,UAAMG,EAAN,eAlBU,SAqBME,IAAMC,IAAN,UAAaF,GAAOH,GArB1B,uBAqBTM,EArBS,EAqBTA,KArBS,kBAuBV,CAACP,QAAQ,EAAMO,SAvBL,yCAyBXC,EAAU,KAAMC,UAAY,KAAMA,SAASF,KAAKC,QAC5C,KAAMC,SAASF,KAAKC,QACpB,KAAMA,QA3BC,kBA6BV,CAACR,QAAQ,EAAOU,MAAOF,IA7Bb,0DAAH,sD,iJCgNPG,UA3LQ,WAErB,IAAMZ,EAAOa,cAAPb,GACFc,EAAUC,cAGd,EAA0BC,mBAAS,MAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,MAAnC,mBAAOL,EAAP,KAAcQ,EAAd,KAGAC,qBAAU,WAAM,4CAGd,4BAAArB,EAAA,sEACqBD,YAAUE,GAD/B,QAGM,QAFEqB,EADR,cAGM,IAAJA,OAAA,EAAAA,EAAMpB,QAASiB,EAAQ,OAACG,QAAD,IAACA,OAAD,EAACA,EAAMb,MAAQW,EAAQ,OAACE,QAAD,IAACA,OAAD,EAACA,EAAMV,OAHvD,4CAHc,sBACdW,QAAQC,IAAI,uCADE,mCASdC,KACC,CAACxB,IAMJ,OAAc,OAAViB,EACK,cAAC,IAAD,IAGLN,EACK,eAAC,IAAD,eAAWA,KAIlB,qCACE,cAAC,IAAD,IACA,cAAC,IAAD,UACE,cAAC,IAAD,CAAMc,GAAI,GAAV,SACE,eAAC,IAAD,CAAO5B,UAAU,OAAjB,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAM6B,GAAI,EAAV,SACE,+CAAkB1B,OAEpB,cAAC,IAAD,CAAM0B,GAAI,EAAV,SACE,cAAC,IAAD,CAAc7B,UAAU,iBAAxB,SACE,cAAC,IAAD,CACEH,MAAM,oBACNG,UAAU,OACV8B,QAAS,WA3B3Bb,EAAQc,KAAR,qBAwBgB,6BAWR,cAAC,IAAD,UACE,cAAC,KAAD,UACE,eAAC,KAAD,WACE,eAAC,KAAD,WACE,cAAC,KAAD,qBACA,cAAC,KAAD,UAAiBX,EAAMY,YAEzB,eAAC,KAAD,WACE,cAAC,KAAD,wBACA,cAAC,KAAD,UAAiBZ,EAAMa,eAEzB,eAAC,KAAD,WACE,cAAC,KAAD,uBACA,cAAC,KAAD,UAAiBb,EAAMc,cAEzB,eAAC,KAAD,WACE,cAAC,KAAD,oBACA,cAAC,KAAD,UAAiBd,EAAMe,WAEzB,eAAC,KAAD,WACE,cAAC,KAAD,qBACA,cAAC,KAAD,UAAiBf,EAAMhB,YAEzB,eAAC,KAAD,WACE,cAAC,KAAD,uBACA,cAAC,KAAD,UAAiBgB,EAAMgB,6BAQrC,cAAC,IAAD,UACE,cAAC,IAAD,CAAMR,GAAI,GAAV,SACE,eAAC,IAAD,CAAO5B,UAAU,OAAjB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAM6B,GAAI,EAAV,SACE,iDAIN,cAAC,IAAD,UACE,eAAC,KAAD,WACE,cAAC,KAAD,UACE,eAAC,KAAD,WACE,cAAC,KAAD,CAAkBQ,MAAM,MAAxB,kBACA,cAAC,KAAD,CAAkBA,MAAM,MAAxB,mBACA,cAAC,KAAD,CAAkBA,MAAM,MAAxB,2BAGJ,cAAC,KAAD,UACGjB,EAAMkB,MAAMC,OAAS,EACpBnB,EAAMkB,MAAME,KAAI,SAACC,GAAD,OACd,eAAC,KAAD,WACE,cAAC,KAAD,UAAiBA,EAAKC,OACtB,cAAC,KAAD,UAAiBD,EAAKE,QACtB,cAAC,KAAD,UAAiBF,EAAKG,aAHRH,EAAKI,QAOvB,6BAAK,2BAQnB,cAAC,IAAD,UACE,cAAC,IAAD,CAAMjB,GAAI,GAAV,SACE,eAAC,IAAD,CAAO5B,UAAU,OAAjB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAM6B,GAAI,EAAV,SACE,mDAIN,cAAC,IAAD,UACE,cAAC,KAAD,UACE,eAAC,KAAD,WACE,eAAC,KAAD,WACE,cAAC,KAAD,sBACA,cAAC,KAAD,UACGT,EAAM0B,gBAAgBC,aAG3B,eAAC,KAAD,WACE,cAAC,KAAD,mBACA,cAAC,KAAD,UACG3B,EAAM0B,gBAAgBE,UAG3B,eAAC,KAAD,WACE,cAAC,KAAD,sBACA,cAAC,KAAD,UACG5B,EAAM0B,gBAAgBG,aAG3B,eAAC,KAAD,WACE,cAAC,KAAD,sBACA,cAAC,KAAD,UACG7B,EAAM0B,gBAAgBI,aAG3B,eAAC,KAAD,WACE,cAAC,KAAD,uBACA,cAAC,KAAD,UACG9B,EAAM0B,gBAAgBK,cAG3B,eAAC,KAAD,WACE,cAAC,KAAD,wBACA,cAAC,KAAD,UACG/B,EAAM0B,gBAAgBM","file":"static/js/20.afd0f0d4.chunk.js","sourcesContent":["export const variable = {\r\n    env: 'prod', // local | prod\r\n    endpointLocal: 'http://127.0.0.1:5059',\r\n    endpointProd:'https://projet-eats-nrh.herokuapp.com',\r\n}","import React from 'react'\r\nimport {CAlert} from '@coreui/react'\r\n\r\nconst Message = ({variant, children}) => {\r\n    return <CAlert color={variant}>\r\n        { children }\r\n    </CAlert>\r\n}\r\n\r\nMessage.defaultProps = {\r\n    variant: 'info'\r\n}\r\n\r\nexport default Message\r\n","import React from 'react'\r\nimport {CSpinner} from '@coreui/react'\r\n\r\nconst Loader = () => {\r\n    return <>\r\n    <CSpinner color=\"primary\" >\r\n        <span className='sr-only'>Loading ...</span>\r\n    </CSpinner>\r\n    </>\r\n}\r\n\r\nexport default Loader","import axios from 'axios'\r\nimport { variable } from '../configs/variable'\r\n\r\nexport const getOrders = async (id = null, status = null) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        let url = null\r\n\r\n        if (id) {\r\n            url = `${endpoint}/api/orders/${id}`\r\n        } else if (status) {\r\n            url = `${endpoint}/api/orders?status=${status}`\r\n        } else {\r\n            url = `${endpoint}/api/orders`\r\n        }\r\n\r\n        const { data } = await axios.get(`${url}`, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}\r\n\r\nexport const createOrders = async (body) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        const { data } = await axios.post(`${endpoint}/api/orders`, body, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}\r\n\r\nexport const sendFactureFunction = async (id) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        const { data } = await axios.get(`${endpoint}/api/facture/${id}`, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CTable,\r\n  CTableBody,\r\n  CTableDataCell,\r\n  CTableRow,\r\n  CButtonGroup,\r\n  CButton,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n} from \"@coreui/react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\n\r\nimport Loader from \"../../components/Loader\";\r\nimport Message from \"../../components/Message\";\r\nimport { Authentification } from \"../../components/index\";\r\n\r\nimport { getOrders } from \"../../provider/orderFetch\";\r\n\r\nconst DetailCommande = () => {\r\n  /**Params Route */\r\n  let { id } = useParams();\r\n  let history = useHistory();\r\n\r\n  /** State */\r\n  const [order, setOrder] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  /** Run once, when the component mounts */\r\n  useEffect(() => {\r\n    console.log(\"Run once, when the component mounts\");\r\n\r\n    async function fetch() {\r\n      const resp = await getOrders(id);\r\n\r\n      resp?.status ? setOrder(resp?.data) : setError(resp?.error);\r\n    }\r\n\r\n    fetch();\r\n  }, [id]);\r\n\r\n  const back = () => {\r\n    history.push(`/administrateurs`);\r\n  };\r\n\r\n  if (order === null) {\r\n    return <Loader />;\r\n  }\r\n\r\n  if (error) {\r\n    return <Message> {error}</Message>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Authentification />\r\n      <CRow>\r\n        <CCol xs={12}>\r\n          <CCard className=\"mb-4\">\r\n            <CCardHeader>\r\n              <CRow>\r\n                <CCol sm={5}>\r\n                  <strong>Commande {id}</strong>\r\n                </CCol>\r\n                <CCol sm={7}>\r\n                  <CButtonGroup className=\"float-end me-3\">\r\n                    <CButton\r\n                      color=\"outline-secondary\"\r\n                      className=\"mx-0\"\r\n                      onClick={() => back()}\r\n                    >\r\n                      Retour\r\n                    </CButton>\r\n                  </CButtonGroup>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CTable>\r\n                <CTableBody>\r\n                  <CTableRow>\r\n                    <CTableDataCell>Numero</CTableDataCell>\r\n                    <CTableDataCell>{order.numero}</CTableDataCell>\r\n                  </CTableRow>\r\n                  <CTableRow>\r\n                    <CTableDataCell>firstName</CTableDataCell>\r\n                    <CTableDataCell>{order.firstName}</CTableDataCell>\r\n                  </CTableRow>\r\n                  <CTableRow>\r\n                    <CTableDataCell>lastName</CTableDataCell>\r\n                    <CTableDataCell>{order.lastName}</CTableDataCell>\r\n                  </CTableRow>\r\n                  <CTableRow>\r\n                    <CTableDataCell>email</CTableDataCell>\r\n                    <CTableDataCell>{order.email}</CTableDataCell>\r\n                  </CTableRow>\r\n                  <CTableRow>\r\n                    <CTableDataCell>Status</CTableDataCell>\r\n                    <CTableDataCell>{order.status}</CTableDataCell>\r\n                  </CTableRow>\r\n                  <CTableRow>\r\n                    <CTableDataCell>Creation</CTableDataCell>\r\n                    <CTableDataCell>{order.createdAt}</CTableDataCell>\r\n                  </CTableRow>\r\n                </CTableBody>\r\n              </CTable>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n      <CRow>\r\n        <CCol xs={12}>\r\n          <CCard className=\"mb-4\">\r\n            <CCardHeader>\r\n              <CRow>\r\n                <CCol sm={5}>\r\n                  <strong>Items</strong>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CTable>\r\n                <CTableHead>\r\n                  <CTableRow>\r\n                    <CTableHeaderCell scope=\"col\">Name</CTableHeaderCell>\r\n                    <CTableHeaderCell scope=\"col\">Price</CTableHeaderCell>\r\n                    <CTableHeaderCell scope=\"col\">Quantity</CTableHeaderCell>\r\n                  </CTableRow>\r\n                </CTableHead>\r\n                <CTableBody>\r\n                  {order.items.length > 0 ? (\r\n                    order.items.map((item) => (\r\n                      <CTableRow key={item._id}>\r\n                        <CTableDataCell>{item.name}</CTableDataCell>\r\n                        <CTableDataCell>{item.price}</CTableDataCell>\r\n                        <CTableDataCell>{item.quantity}</CTableDataCell>\r\n                      </CTableRow>\r\n                    ))\r\n                  ) : (\r\n                    <h3>{\"NO Items\"}</h3>\r\n                  )}\r\n                </CTableBody>\r\n              </CTable>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n      <CRow>\r\n        <CCol xs={12}>\r\n          <CCard className=\"mb-4\">\r\n            <CCardHeader>\r\n              <CRow>\r\n                <CCol sm={5}>\r\n                  <strong>Address</strong>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CTable>\r\n                <CTableBody>\r\n                  <CTableRow>\r\n                    <CTableDataCell>address</CTableDataCell>\r\n                    <CTableDataCell>\r\n                      {order.shippingAddress.address}\r\n                    </CTableDataCell>\r\n                  </CTableRow>\r\n                  <CTableRow>\r\n                    <CTableDataCell>city</CTableDataCell>\r\n                    <CTableDataCell>\r\n                      {order.shippingAddress.city}\r\n                    </CTableDataCell>\r\n                  </CTableRow>\r\n                  <CTableRow>\r\n                    <CTableDataCell>zipCode</CTableDataCell>\r\n                    <CTableDataCell>\r\n                      {order.shippingAddress.zipCode}\r\n                    </CTableDataCell>\r\n                  </CTableRow>\r\n                  <CTableRow>\r\n                    <CTableDataCell>country</CTableDataCell>\r\n                    <CTableDataCell>\r\n                      {order.shippingAddress.country}\r\n                    </CTableDataCell>\r\n                  </CTableRow>\r\n                  <CTableRow>\r\n                    <CTableDataCell>latitude</CTableDataCell>\r\n                    <CTableDataCell>\r\n                      {order.shippingAddress.latitude}\r\n                    </CTableDataCell>\r\n                  </CTableRow>\r\n                  <CTableRow>\r\n                    <CTableDataCell>longitude</CTableDataCell>\r\n                    <CTableDataCell>\r\n                      {order.shippingAddress.longitude}\r\n                    </CTableDataCell>\r\n                  </CTableRow>\r\n                </CTableBody>\r\n              </CTable>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DetailCommande;\r\n"],"sourceRoot":""}