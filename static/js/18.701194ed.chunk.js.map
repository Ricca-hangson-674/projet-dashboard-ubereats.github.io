{"version":3,"sources":["views/dashboard/Dashboard.js","configs/variable.js","components/Message.js","components/Loader.js","provider/dashboardFetch.js"],"names":["WidgetsDropdownCustom","lazy","Dashboard","useState","footerStat","setFooterStat","chiffreAffaires","setChiffreAffaires","error","setError","errorCA","setErrorCA","type","setType","status","setStatus","labels","setLabels","data","setData","useEffect","a","getDashboard","resp","getChiffreAffaires","resp_1","console","log","fetch","labelsTMP","dataTMP","dataGlobal","ordersChiffresGroupedByDayStatus","length","ordersChiffresGroupedByMonthWithStatus","ordersChiffresGroupedByYearWithStatus","order","moment","updatedAt","format","total","toggleType","value","key","countClient","countCommercant","countAdmin","countOrder","className","sm","id","onChange","e","target","map","onClick","color","active","style","height","marginTop","datasets","label","backgroundColor","hexToRgba","getStyle","borderColor","pointHoverBackgroundColor","borderWidth","fill","options","maintainAspectRatio","plugins","legend","display","scales","x","grid","drawOnChartArea","y","ticks","beginAtZero","maxTicksLimit","elements","line","tension","point","radius","hitRadius","hoverRadius","hoverBorderWidth","xs","cols","md","orderStat","item","index","title","percent","thin","Number","variable","env","endpointLocal","endpointProd","endpointFront","Message","variant","children","defaultProps","Loader","config","headers","endpoint","url","axios","get","message","response","body","post"],"mappings":"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","file":"static/js/18.701194ed.chunk.js","sourcesContent":["import React, { lazy, useState, useEffect } from \"react\";\n\nimport moment from \"moment\";\n\nimport {\n  CButton,\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCol,\n  CProgress,\n  CRow,\n  CFormSelect,\n} from \"@coreui/react\";\nimport { CChartLine } from \"@coreui/react-chartjs\";\nimport { getStyle, hexToRgba } from \"@coreui/utils\";\nimport { Authentification } from \"../../components/index\";\n\nimport {\n  // getOrders,\n  getChiffreAffaires,\n  getDashboard,\n} from \"../../provider/dashboardFetch\";\n\nimport Loader from \"../../components/Loader\";\nimport Message from \"../../components/Message\";\n\nconst WidgetsDropdownCustom = lazy(() => import(\"../widgets/WidgetsDropdownCustom.js\"));\n// const WidgetsDropdown = lazy(() => import(\"../widgets/WidgetsDropdown.js\"));\n\nconst Dashboard = () => {\n  /** State */\n  const [footerStat, setFooterStat] = useState(null);\n  const [chiffreAffaires, setChiffreAffaires] = useState(null);\n  const [error, setError] = useState(null);\n  const [errorCA, setErrorCA] = useState(null);\n  const [type, setType] = useState(\"Day\");\n  const [status, setStatus] = useState(\"READING\");\n  const [labels, setLabels] = useState(null);\n  const [data, setData] = useState(null);\n\n  /** Run once, when the component mounts */\n  useEffect(() => {\n    console.log(\"Run once, when the component mounts\");\n\n    async function fetch() {\n      const resp = await getDashboard();\n      const resp_1 = await getChiffreAffaires();\n\n      resp?.status ? setFooterStat({ ...resp?.data }) : setError(resp?.error);\n      resp_1?.status\n        ? setChiffreAffaires({ ...resp_1?.data })\n        : setErrorCA(resp_1?.error);\n    }\n\n    fetch();\n  }, []);\n\n  useEffect(() => {\n    console.log(\"Dependency\");\n\n    let labelsTMP = [];\n    let dataTMP = [];\n    let dataGlobal = [];\n\n    if (type === \"Day\") {\n      if (chiffreAffaires?.ordersChiffresGroupedByDayStatus?.length)\n        dataGlobal = [...chiffreAffaires?.ordersChiffresGroupedByDayStatus];\n    } else if (type === \"Month\") {\n      if (chiffreAffaires?.ordersChiffresGroupedByMonthWithStatus?.length)\n        dataGlobal = [\n          ...chiffreAffaires?.ordersChiffresGroupedByMonthWithStatus,\n        ];\n    } else if (type === \"Year\") {\n      if (chiffreAffaires?.ordersChiffresGroupedByYearWithStatus?.length)\n        dataGlobal = [\n          ...chiffreAffaires?.ordersChiffresGroupedByYearWithStatus,\n        ];\n    }\n\n    if (dataGlobal?.length) {\n      for (const order of dataGlobal) {\n        if (status === order.status) {\n          if (type === \"Day\") {\n            labelsTMP = [\n              ...labelsTMP,\n              moment(order.updatedAt).format(\"DD/MM/YYYY\"),\n            ];\n            dataTMP = [...dataTMP, order.total];\n          } else if (type === \"Month\") {\n            labelsTMP = [\n              ...labelsTMP,\n              moment(order.updatedAt).format(\"MM/YYYY\"),\n            ];\n            dataTMP = [...dataTMP, order.total];\n          } else if (type === \"Year\") {\n            labelsTMP = [...labelsTMP, moment(order.updatedAt).format(\"YYYY\")];\n            dataTMP = [...dataTMP, order.total];\n          }\n        }\n      }\n\n      setData([...dataTMP]);\n      setLabels([...labelsTMP]);\n    }\n  }, [status, type, chiffreAffaires]);\n\n  const toggleType = (value, key) => {\n    if (key === \"status\") setStatus(value);\n    else if (key === \"type\") setType(value);\n  };\n  // console.log(\"chiffreAffaires\", chiffreAffaires);\n  // console.log(\"labels\", labels, data, type, status);\n\n  if (footerStat === null || chiffreAffaires === null) {\n    return <Loader />;\n  }\n\n  if (errorCA) {\n    return <Message> {errorCA}</Message>;\n  }\n\n  if (error) {\n    return <Message> {error}</Message>;\n  }\n\n  return (\n    <>\n      <Authentification />\n\n      <WidgetsDropdownCustom\n        countClient={footerStat.countClient}\n        countCommercant={footerStat.countCommercant}\n        countAdmin={footerStat.countAdmin}\n        countOrder={footerStat.countOrder}\n      />\n\n      {/* <WidgetsDropdown /> */}\n\n      <CCard className=\"mb-4\">\n        <CCardBody>\n          <CRow>\n            <CCol sm={5}>\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\n                Commandes\n              </h4>\n              <div className=\"small text-medium-emphasis\">\n                {moment().format(\"DD/MMM/YYYY h:mm:ss A\")}\n              </div>\n            </CCol>\n            <CCol sm={7} className=\"d-none d-md-block\">\n              <CFormSelect\n                value={status}\n                aria-label=\"Status\"\n                className=\"float-end mb-1\"\n                onChange={(e) => {\n                  toggleType(e.target.value, \"status\");\n                }}\n              >\n                {[\n                  \"ORDER_STATUS_UNSPECIFIED\",\n                  \"CONFIRMED\",\n                  \"PENDING\",\n                  \"PENDING_MERCHANT_CONFIRMATION\",\n                  \"CANCELED\",\n                  \"FAILED\",\n                  \"DECLINED_BY_MERCHANT\",\n                  \"READING\",\n                ].map((value) => (\n                  <option value={value} key={value}>\n                    {value}\n                  </option>\n                ))}\n              </CFormSelect>\n              <CButtonGroup className=\"float-end me-3\">\n                {[\"Day\", \"Month\", \"Year\"].map((value) => (\n                  <CButton\n                    onClick={() => toggleType(value, \"type\")}\n                    color=\"outline-secondary\"\n                    key={value}\n                    className=\"mx-0\"\n                    active={value === type}\n                  >\n                    {value}\n                  </CButton>\n                ))}\n              </CButtonGroup>\n            </CCol>\n          </CRow>\n          <CChartLine\n            style={{ height: \"300px\", marginTop: \"40px\" }}\n            data={{\n              labels: labels !== null ? [...labels] : [],\n              datasets: [\n                {\n                  label: `Commandes par ${type}`,\n                  backgroundColor: hexToRgba(getStyle(\"--cui-info\"), 10),\n                  borderColor: getStyle(\"--cui-info\"),\n                  pointHoverBackgroundColor: getStyle(\"--cui-info\"),\n                  borderWidth: 2,\n                  data: data !== null ? [...data] : [],\n                  fill: true,\n                },\n              ],\n            }}\n            options={{\n              maintainAspectRatio: false,\n              plugins: {\n                legend: {\n                  display: false,\n                },\n              },\n              scales: {\n                x: {\n                  grid: {\n                    drawOnChartArea: false,\n                  },\n                },\n                y: {\n                  ticks: {\n                    beginAtZero: true,\n                    maxTicksLimit: 5,\n                    // stepSize: Math.ceil(250 / 5),\n                    // max: 250,\n                  },\n                },\n              },\n              elements: {\n                line: {\n                  tension: 0.4,\n                },\n                point: {\n                  height: 5,\n                  radius: 5,\n                  hitRadius: 10,\n                  hoverRadius: 4,\n                  hoverBorderWidth: 3,\n                },\n              },\n            }}\n          />\n        </CCardBody>\n        <CCardFooter>\n          <CRow xs={{ cols: 1 }} md={{ cols: 5 }} className=\"text-center\">\n            {footerStat.orderStat.map((item, index) => (\n              <CCol className=\"mb-sm-2 mb-0\" key={index}>\n                <div className=\"text-medium-emphasis\">{item.title}</div>\n                <strong>\n                  {item.value} ({item.percent}%)\n                </strong>\n                <CProgress\n                  thin\n                  className=\"mt-2\"\n                  color={item.color}\n                  value={item?.percent ? Number(item?.percent) : 0}\n                />\n              </CCol>\n            ))}\n          </CRow>\n        </CCardFooter>\n      </CCard>\n    </>\n  );\n};\n\nexport default Dashboard;\n","export const variable = {\r\n    env: 'prod', // local | prod\r\n    endpointLocal: 'http://127.0.0.1:5059',\r\n    endpointProd:'https://projet-eats-nrh.herokuapp.com',\r\n    endpointFront:'http://localhost:3232',\r\n}","import React from 'react'\r\nimport {CAlert} from '@coreui/react'\r\n\r\nconst Message = ({variant, children}) => {\r\n    return <CAlert color={variant}>\r\n        { children }\r\n    </CAlert>\r\n}\r\n\r\nMessage.defaultProps = {\r\n    variant: 'info'\r\n}\r\n\r\nexport default Message\r\n","import React from 'react'\r\nimport {CSpinner} from '@coreui/react'\r\n\r\nconst Loader = () => {\r\n    return <>\r\n    <CSpinner color=\"primary\" >\r\n        <span className='sr-only'>Loading ...</span>\r\n    </CSpinner>\r\n    </>\r\n}\r\n\r\nexport default Loader","import axios from 'axios'\r\nimport { variable } from '../configs/variable'\r\n\r\nexport const getDashboard = async () => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        const url  = `${endpoint}/api/dashboard`\r\n\r\n        const { data } = await axios.get(`${url}`, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}\r\n\r\nexport const getOrders = async (body) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        const url  = `${endpoint}/api/dashboard/orders`\r\n\r\n        const { data } = await axios.post(`${url}`, body, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}\r\n\r\nexport const getChiffreAffaires = async (body) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        const url  = `${endpoint}/api/dashboard/chiffres-affaires`\r\n\r\n        const { data } = await axios.post(`${url}`, body, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}"],"sourceRoot":""}