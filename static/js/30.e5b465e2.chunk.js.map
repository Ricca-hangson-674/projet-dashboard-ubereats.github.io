{"version":3,"sources":["views/paiements/AjoutPaiement.js","configs/variable.js","components/Message.js","provider/paiementFetch.js"],"names":["schemaUser","yup","shape","name","required","iban","montant","datePaiement","AjoutPaiement","useState","message","setMessage","success","setSuccess","error","setError","history","useHistory","idPaiement","useParams","id","useForm","resolver","yupResolver","mode","register","handleSubmit","formState","errors","isSubmitting","isValid","resetField","setValue","useEffect","console","log","fetch","a","getPaiements","resp","status","data","firstName","lastName","email","onSubmit","addPaiement","xs","className","sm","color","onClick","push","md","htmlFor","type","invalid","step","variable","env","endpointLocal","endpointProd","endpointFront","Message","variant","children","defaultProps","config","headers","endpoint","url","axios","get","response","deletePaiement","delete","paiement","reponse","put","post"],"mappings":"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","file":"static/js/30.e5b465e2.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CForm,\r\n  CButton,\r\n  CFormLabel,\r\n  CFormInput,\r\n  CFormFeedback,\r\n  CButtonGroup,\r\n} from \"@coreui/react\";\r\n\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\n\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\n\r\nimport Message from \"../../components/Message\";\r\nimport { Authentification } from \"../../components/index\";\r\n\r\nimport { getPaiements, addPaiement } from '../../provider/paiementFetch'\r\n\r\nconst schemaUser = yup.object().shape({\r\n  name: yup.string().required(\"name is required\"),\r\n  iban: yup.string().required(\"iban is required\"),\r\n  montant: yup.number().required(\"montant is required\"),\r\n  datePaiement: yup.date().required(\"datePaiement is required\"),\r\n});\r\n\r\nconst AjoutPaiement = () => {\r\n  /** State */\r\n  const [message, setMessage] = useState(null);\r\n  const [success, setSuccess] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  /** Hook Route */\r\n  let history = useHistory();\r\n  let { id: idPaiement } = useParams();\r\n\r\n  /** Form Hook */\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isValid },\r\n    resetField,\r\n    setValue,\r\n  } = useForm({\r\n    resolver: yupResolver(schemaUser),\r\n    mode: \"onTouched\",\r\n  });\r\n\r\n  /** Run once, when the component mounts */\r\n  useEffect(() => {\r\n    console.log(\"Run once, when the component mounts\");\r\n\r\n    if (idPaiement) {\r\n      async function fetch() {\r\n        const resp = await getPaiements(idPaiement);\r\n\r\n        if (resp?.status) {\r\n          setValue(\"firstName\", resp?.data.firstName);\r\n          setValue(\"lastName\", resp?.data.lastName);\r\n          setValue(\"email\", resp?.data.email);\r\n          setValue(\"password\", \"\");\r\n        } else {\r\n          setMessage(resp?.error);\r\n        }\r\n      }\r\n\r\n      fetch();\r\n    }\r\n  }, [idPaiement, setValue]);\r\n\r\n  const onSubmit = async (data) => {\r\n    let resp = null;\r\n\r\n    if (isValid) {\r\n      /** reste */\r\n      setSuccess(false);\r\n      setError(false);\r\n      resp = await addPaiement(data, idPaiement);\r\n    }\r\n\r\n    if (resp?.status) {\r\n      /** Reset */\r\n      resetField(\"name\");\r\n      resetField(\"iban\");\r\n      resetField(\"montant\");\r\n      resetField(\"datePaiement\");\r\n\r\n      setSuccess(true);\r\n    } else {\r\n      setError(true);\r\n      setMessage(resp?.error);\r\n    }\r\n  };\r\n\r\n  const back = () => {\r\n    history.push(`/paiements`);\r\n  };\r\n\r\n  /* console.log(\r\n    \"errors\",\r\n    errors,\r\n    isSubmitted, // true si après l'envoi du formulaire\r\n    isSubmitSuccessful, // true si formulaire a été soumis avec succès sans aucun rejet ou a été lancé dans le rappel\r\n    isSubmitting, // true si formulaire est en cours de soumission\r\n    isValid // true si formulaire ne contient aucune erreur\r\n  ); */\r\n\r\n  console.log('errors', errors)\r\n\r\n  return (\r\n    <CRow>\r\n      <Authentification />\r\n      {error && <Message> {message}</Message>}\r\n      {success && <Message> {`Success Ajout ou Edite`}</Message>}\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <CRow>\r\n              <CCol sm={5}>\r\n                <strong>Ajout Paiement</strong>\r\n              </CCol>\r\n              <CCol sm={7}>\r\n                <CButtonGroup className=\"float-end me-3\">\r\n                  <CButton\r\n                    color=\"outline-secondary\"\r\n                    className=\"mx-0\"\r\n                    onClick={() => back()}\r\n                  >\r\n                    Retour\r\n                  </CButton>\r\n                </CButtonGroup>\r\n              </CCol>\r\n            </CRow>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CForm\r\n              className={`row g-3`}\r\n              onSubmit={handleSubmit(onSubmit)}\r\n            >\r\n              <CCol md={6}>\r\n                <CFormLabel htmlFor=\"name\">name</CFormLabel>\r\n                <CFormInput\r\n                  type=\"text\"\r\n                  id=\"name\"\r\n                  required\r\n                  {...register(\"name\")}\r\n                />\r\n                <CFormFeedback invalid>\r\n                  {errors.name?.message}\r\n                </CFormFeedback>\r\n              </CCol>\r\n              <CCol md={6}>\r\n                <CFormLabel htmlFor=\"iban\">iban</CFormLabel>\r\n                <CFormInput\r\n                  type=\"text\"\r\n                  id=\"iban\"\r\n                  {...register(\"iban\")}\r\n                />\r\n                <CFormFeedback invalid>\r\n                  {errors.iban?.message}\r\n                </CFormFeedback>\r\n              </CCol>\r\n              <CCol md={6}>\r\n                <CFormLabel htmlFor=\"montant\">montant</CFormLabel>\r\n                <CFormInput\r\n                  type=\"number\"\r\n                  step={\"any\"}\r\n                  id=\"montant\"\r\n                  required\r\n                  {...register(\"montant\")}\r\n                />\r\n                <CFormFeedback invalid>{errors.montant?.message}</CFormFeedback>\r\n              </CCol>\r\n              <CCol md={6}>\r\n                <CFormLabel htmlFor=\"datePaiement\">datePaiement</CFormLabel>\r\n                <CFormInput\r\n                  type=\"datetime\"\r\n                  id=\"datePaiement\"\r\n                  required\r\n                  {...register(\"datePaiement\")}\r\n                />\r\n                <CFormFeedback invalid>\r\n                  {errors.datePaiement?.message}\r\n                </CFormFeedback>\r\n              </CCol>\r\n              <CCol xs={12}>\r\n                <CButton\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className={isSubmitting ? \"disabled\" : \" \"}\r\n                >\r\n                  Submit\r\n                </CButton>\r\n              </CCol>\r\n            </CForm>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default AjoutPaiement;\r\n","export const variable = {\r\n    env: 'prod', // local | prod\r\n    endpointLocal: 'http://127.0.0.1:5059',\r\n    endpointProd:'https://projet-eats-nrh.herokuapp.com',\r\n    endpointFront:'http://localhost:3232',\r\n}","import React from 'react'\r\nimport {CAlert} from '@coreui/react'\r\n\r\nconst Message = ({variant, children}) => {\r\n    return <CAlert color={variant}>\r\n        { children }\r\n    </CAlert>\r\n}\r\n\r\nMessage.defaultProps = {\r\n    variant: 'info'\r\n}\r\n\r\nexport default Message\r\n","import axios from 'axios'\r\nimport { variable } from '../configs/variable'\r\n\r\nexport const getPaiements = async (id = null) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        const url  = id ? `${endpoint}/api/paiements/${id}` : `${endpoint}/api/paiements`\r\n\r\n        const { data } = await axios.get(`${url}`, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}\r\n\r\nexport const deletePaiement = async (id) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        \r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        const { data } = await axios.delete(`${endpoint}/api/paiements/${id}`, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}\r\n\r\nexport const addPaiement = async (paiement, id = null) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        let reponse = null\r\n\r\n        if (id) {\r\n            reponse =  await axios.put(`${endpoint}/api/paiements/${id}`, paiement, config)\r\n        } else {\r\n            reponse =  await axios.post(`${endpoint}/api/paiements`, paiement, config)\r\n        }\r\n\r\n        return {status: true, data: reponse?.data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}"],"sourceRoot":""}