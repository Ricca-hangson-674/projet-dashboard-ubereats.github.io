{"version":3,"sources":["components/Loader.js","components/Message.js","configs/variable.js","provider/orderFetch.js","views/commandes/Commandes.js"],"names":["Loader","color","className","Message","variant","children","defaultProps","variable","env","endpointLocal","endpointProd","getOrders","a","id","status","config","headers","endpoint","url","axios","get","data","message","response","error","Commandes","useState","orders","setOrders","setError","setStatus","useEffect","resp","console","log","fetch","changeStatus","xs","sm","map","value","active","onClick","scope","length","order","numero","email","createdAt","_id"],"mappings":"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","file":"static/js/10.fbd282cb.chunk.js","sourcesContent":["import React from 'react'\r\nimport {CSpinner} from '@coreui/react'\r\n\r\nconst Loader = () => {\r\n    return <>\r\n    <CSpinner color=\"primary\" >\r\n        <span className='sr-only'>Loading ...</span>\r\n    </CSpinner>\r\n    </>\r\n}\r\n\r\nexport default Loader","import React from 'react'\r\nimport {CAlert} from '@coreui/react'\r\n\r\nconst Message = ({variant, children}) => {\r\n    return <CAlert color={variant}>\r\n        { children }\r\n    </CAlert>\r\n}\r\n\r\nMessage.defaultProps = {\r\n    variant: 'info'\r\n}\r\n\r\nexport default Message\r\n","export const variable = {\r\n    env: 'prod',\r\n    endpointLocal: 'http://127.0.0.1:5059',\r\n    endpointProd:'https://projet-eats-nrh.herokuapp.com'\r\n}","import axios from 'axios'\r\nimport { variable } from '../configs/variable'\r\n\r\nexport const getOrders = async (id = null, status = null) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        let url  = id ? `${endpoint}/api/orders/${id}` : `${endpoint}/api/orders`\r\n\r\n        url = status ? `${endpoint}/api/orders?status=${status}` : `${endpoint}/api/orders`\r\n\r\n        const { data } = await axios.get(`${url}`, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}\r\n\r\nexport const createOrders = async (body) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        const { data } = await axios.post(`${endpoint}/api/orders`, body, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}\r\n\r\nexport const sendFactureFunction = async (id) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(`/api/facture/${id}`, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CTable,\r\n  CTableBody,\r\n  CTableDataCell,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n  CTableRow,\r\n  CButton,\r\n  CButtonGroup\r\n} from \"@coreui/react\";\r\n\r\nimport Loader from \"../../components/Loader\";\r\nimport Message from \"../../components/Message\";\r\n\r\nimport { getOrders } from \"../../provider/orderFetch\";\r\n\r\nconst Commandes = () => {\r\n  /** State */\r\n  const [orders, setOrders] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [status, setStatus] = useState(null);\r\n\r\n  /** Run once, when the component mounts */\r\n  useEffect(() => {\r\n    console.log(\"Run once, when the component mounts\");\r\n\r\n    async function fetch() {\r\n      const resp = await getOrders();\r\n\r\n      resp?.status ? setOrders([...resp?.data]) : setError(resp?.error);\r\n    }\r\n\r\n    fetch();\r\n  }, []);\r\n\r\n  const changeStatus = async (status) => {\r\n    const resp = await getOrders(null, status);\r\n\r\n    setStatus(status)\r\n\r\n    if (resp.status) {\r\n      setOrders([...resp?.data]);\r\n    }\r\n  }\r\n\r\n  if (orders === null) {\r\n    return <Loader />;\r\n  }\r\n\r\n  if (error) {\r\n    return <Message> {error}</Message>;\r\n  }\r\n\r\n  return (\r\n    <CRow>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <CRow>\r\n            <CCol sm={5}>\r\n            <strong>Listes des commandes</strong>\r\n            </CCol>\r\n            <CCol sm={7} className=\"d-none d-md-block\">\r\n              <CButtonGroup className=\"float-end me-3\">\r\n                {['CONFIRMED', 'READING', 'DECLINED_BY_MERCHANT'].map((value) => (\r\n                  <CButton\r\n                    color=\"outline-secondary\"\r\n                    key={value}\r\n                    className=\"mx-0\"\r\n                    active={value === status}\r\n                    onClick={() => changeStatus(value)}\r\n                  >\r\n                    {value}\r\n                  </CButton>\r\n                ))}\r\n              </CButtonGroup>\r\n            </CCol>\r\n          </CRow>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CTable>\r\n              <CTableHead>\r\n                <CTableRow>\r\n                  <CTableHeaderCell scope=\"col\">Numero</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Email</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Status</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Date de creation</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Actions</CTableHeaderCell>\r\n                </CTableRow>\r\n              </CTableHead>\r\n              <CTableBody>\r\n              {orders.length > 0 ? (\r\n                  orders.map((order) => (\r\n                    <CTableRow key={order._id}>\r\n                      <CTableDataCell>{order.numero}</CTableDataCell>\r\n                      <CTableDataCell>{order.email}</CTableDataCell>\r\n                      <CTableDataCell>{order.status}</CTableDataCell>\r\n                      <CTableDataCell>{order.createdAt}</CTableDataCell>\r\n                      <CTableDataCell>\r\n                        <CButton color={\"primary\"} className=\"me-1\">\r\n                          {\" \"}\r\n                          Voir{\" \"}\r\n                        </CButton>\r\n                        <CButton color={\"secondary\"} className=\"me-1\">\r\n                          {\" \"}\r\n                          Editer{\" \"}\r\n                        </CButton>\r\n                        <CButton\r\n                          color={\"danger\"}\r\n                        >\r\n                          {\" \"}\r\n                          Supprimer{\" \"}\r\n                        </CButton>\r\n                      </CTableDataCell>\r\n                    </CTableRow>\r\n                  ))\r\n                ) : (\r\n                  <h3>{\"NO Items\"}</h3>\r\n                )}\r\n              </CTableBody>\r\n            </CTable>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default Commandes;\r\n"],"sourceRoot":""}