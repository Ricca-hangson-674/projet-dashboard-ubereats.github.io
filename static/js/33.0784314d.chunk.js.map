{"version":3,"sources":["views/pages/login/Login.js","configs/variable.js","components/Message.js","provider/userFetch.js"],"names":["schemaUser","yup","shape","email","required","password","Login","useState","message","setMessage","success","setSuccess","error","setError","history","useHistory","useForm","resolver","yupResolver","mode","register","handleSubmit","formState","errors","isSubmitting","isValid","resetField","onSubmit","data","a","resp","authentification","status","localStorage","setItem","JSON","stringify","push","className","md","noValidate","icon","cilUser","invalid","placeholder","autoComplete","cilLockLocked","type","xs","color","style","width","to","active","tabIndex","variable","env","endpointLocal","endpointProd","endpointFront","Message","variant","children","defaultProps","getUsers","id","config","headers","endpoint","url","axios","get","response","deleteUser","delete","registerUser","user","reponse","put","post"],"mappings":"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","file":"static/js/33.0784314d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n  CFormFeedback,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { cilLockLocked, cilUser } from \"@coreui/icons\";\n\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\n\nimport { useHistory } from \"react-router-dom\";\n\nimport Message from \"../../../components/Message\";\n\nimport { authentification } from \"../../../provider/userFetch\";\n\nconst schemaUser = yup.object().shape({\n  email: yup\n    .string()\n    .email(\"email must email valid\")\n    .required(\"email is required\"),\n  password: yup.string().required(\"password are required\"),\n});\n\nconst Login = () => {\n  /** State */\n  const [message, setMessage] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState(false);\n\n  /** Hook Route */\n  let history = useHistory();\n\n  /** Form Hook */\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting, isValid },\n    resetField,\n  } = useForm({\n    resolver: yupResolver(schemaUser),\n    mode: \"onTouched\",\n  });\n\n  const onSubmit = async (data) => {\n    let resp = null;\n\n    if (isValid) {\n      /** reste */\n      setSuccess(false);\n      setError(false);\n      resp = await authentification(data);\n    }\n\n    if (resp?.status) {\n      /** Reset */\n      resetField(\"email\");\n      resetField(\"password\");\n\n      setSuccess(true);\n\n      /** Store */\n      localStorage.setItem(\"user\", JSON.stringify(resp?.data));\n\n      history.push(\"/\");\n    } else {\n      setError(true);\n      setMessage(resp?.error);\n    }\n  };\n\n  return (\n    <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center\">\n      <CContainer>\n        {error && <Message> {message}</Message>}\n        {success && <Message> {`Success Ajout ou Edite`}</Message>}\n\n        <CRow className=\"justify-content-center\">\n          <CCol md={8}>\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <CForm\n                    className={`row g-3`}\n                    noValidate\n                    onSubmit={handleSubmit(onSubmit)}\n                  >\n                    <h1>Login</h1>\n                    <p className=\"text-medium-emphasis\">\n                      Sign In to your account\n                    </p>\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupText>\n                        <CIcon icon={cilUser} />\n                      </CInputGroupText>\n                      <CFormInput\n                        invalid={errors.email?.message ? true : false}\n                        placeholder=\"Email\"\n                        autoComplete=\"email\"\n                        {...register(\"email\")}\n                      />\n                      <CFormFeedback invalid>\n                        {errors.email?.message}\n                      </CFormFeedback>\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupText>\n                        <CIcon icon={cilLockLocked} />\n                      </CInputGroupText>\n                      <CFormInput\n                        invalid={errors.password?.message ? true : false}\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        autoComplete=\"current-password\"\n                        {...register(\"password\")}\n                      />\n                      <CFormFeedback invalid>\n                        {errors.password?.message}\n                      </CFormFeedback>\n                    </CInputGroup>\n                    <CRow>\n                      <CCol xs={6}>\n                        <CButton\n                          color=\"primary\"\n                          type=\"submit\"\n                          className={`px-4 ${isSubmitting ? \"disabled\" : \" \"}`}\n                        >\n                          Login\n                        </CButton>\n                      </CCol>\n                      <CCol xs={6} className=\"text-right\">\n                        <CButton color=\"link\" type=\"button\" className=\"px-0\">\n                          Forgot password?\n                        </CButton>\n                      </CCol>\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n              <CCard\n                className=\"text-white bg-primary py-5\"\n                style={{ width: \"44%\" }}\n              >\n                <CCardBody className=\"text-center\">\n                  <div>\n                    <h2>Sign up</h2>\n                    <p>\n                      Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n                      sed do eiusmod tempor incididunt ut labore et dolore magna\n                      aliqua.\n                    </p>\n                    <Link to=\"/register\">\n                      <CButton\n                        color=\"primary\"\n                        className=\"mt-3\"\n                        active\n                        tabIndex={-1}\n                      >\n                        Register Now!\n                      </CButton>\n                    </Link>\n                  </div>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  );\n};\n\nexport default Login;\n","export const variable = {\r\n    env: 'prod', // local | prod\r\n    endpointLocal: 'http://127.0.0.1:5059',\r\n    endpointProd:'https://projet-eats-nrh.herokuapp.com',\r\n    endpointFront:'http://localhost:3232',\r\n}","import React from 'react'\r\nimport {CAlert} from '@coreui/react'\r\n\r\nconst Message = ({variant, children}) => {\r\n    return <CAlert color={variant}>\r\n        { children }\r\n    </CAlert>\r\n}\r\n\r\nMessage.defaultProps = {\r\n    variant: 'info'\r\n}\r\n\r\nexport default Message\r\n","import axios from 'axios'\r\nimport { variable } from '../configs/variable'\r\n\r\nexport const getUsers = async (type = null, id = null) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        let url = null\r\n\r\n        if (id) {\r\n            url  = `${endpoint}/api/users/${id}`\r\n        } else if (type) {\r\n            url  = `${endpoint}/api/users?type=${type}`\r\n        } else {\r\n            url = `${endpoint}/api/users`\r\n        }\r\n\r\n        const { data } = await axios.get(`${url}`, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}\r\n\r\nexport const deleteUser = async (id) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        const { data } = await axios.delete(`${endpoint}/api/users/${id}`, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}\r\n\r\nexport const registerUser = async (user, id = null) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        let reponse = null\r\n\r\n        if (id) {\r\n            reponse =  await axios.put(`${endpoint}/api/users/${id}`, user, config)\r\n        } else {\r\n            reponse =  await axios.post(`${endpoint}/api/users`, user, config)\r\n        }\r\n\r\n        return {status: true, data: reponse?.data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}\r\n\r\nexport const authentification =  async (user) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        const { data } = await axios.post(`${endpoint}/api/users/login`, user, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n\r\n}"],"sourceRoot":""}