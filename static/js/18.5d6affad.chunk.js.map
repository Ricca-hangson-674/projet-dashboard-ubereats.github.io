{"version":3,"sources":["configs/variable.js","components/Message.js","provider/optionListFetch.js","provider/optionFetch.js","views/optionLists/AjoutOptionList.js"],"names":["variable","env","endpointLocal","endpointProd","Message","variant","children","color","defaultProps","getOptionLists","a","id","config","headers","endpoint","url","axios","get","data","status","message","response","error","addOptionList","optionList","reponse","put","post","getOptions","addOption","option","schemaUser","yup","shape","name","required","description","type","options","foods","AjoutOptionList","useState","setMessage","success","setSuccess","setError","optionsSelect","setOptionsSelect","history","useHistory","useParams","paramQuery","window","location","hash","paramsJS","URLSearchParams","substring","lastIndexOf","has","console","log","useForm","resolver","yupResolver","mode","register","handleSubmit","formState","errors","isSubmitting","isValid","resetField","setValue","control","useEffect","resp","map","o","value","_id","label","fetch","onSubmit","body","retour","xs","className","sm","onClick","push","md","htmlFor","invalid","render","field","onChange","onBlur","fieldState","defaultValue","isMulti","to","Object","keys","length","style","display"],"mappings":"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","file":"static/js/18.5d6affad.chunk.js","sourcesContent":["export const variable = {\r\n    env: 'prod', // local | prod\r\n    endpointLocal: 'http://127.0.0.1:5059',\r\n    endpointProd:'https://projet-eats-nrh.herokuapp.com'\r\n}","import React from 'react'\r\nimport {CAlert} from '@coreui/react'\r\n\r\nconst Message = ({variant, children}) => {\r\n    return <CAlert color={variant}>\r\n        { children }\r\n    </CAlert>\r\n}\r\n\r\nMessage.defaultProps = {\r\n    variant: 'info'\r\n}\r\n\r\nexport default Message\r\n","import axios from 'axios'\r\nimport { variable } from '../configs/variable'\r\n\r\nexport const getOptionLists = async (id = null) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        const url  = id ? `${endpoint}/api/optionLists/${id}` : `${endpoint}/api/optionLists`\r\n\r\n        const { data } = await axios.get(`${url}`, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}\r\n\r\nexport const deleteOptionList = async (id) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        \r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        const { data } = await axios.delete(`${endpoint}/api/optionLists/${id}`, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}\r\n\r\nexport const addOptionList = async (optionList, id = null) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        let reponse = null\r\n\r\n        if (id) {\r\n            reponse =  await axios.put(`${endpoint}/api/optionLists/${id}`, optionList, config)\r\n        } else {\r\n            reponse =  await axios.post(`${endpoint}/api/optionLists`, optionList, config)\r\n        }\r\n\r\n        return {status: true, data: reponse?.data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}","import axios from 'axios'\r\nimport { variable } from '../configs/variable'\r\n\r\nexport const getOptions = async (id = null) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        const url  = id ? `${endpoint}/api/options/${id}` : `${endpoint}/api/options`\r\n\r\n        const { data } = await axios.get(`${url}`, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}\r\n\r\nexport const deleteOption = async (id) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        \r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        const { data } = await axios.delete(`${endpoint}/api/options/${id}`, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}\r\n\r\nexport const addOption = async (option, id = null) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        let reponse = null\r\n\r\n        if (id) {\r\n            reponse =  await axios.put(`${endpoint}/api/options/${id}`, option, config)\r\n        } else {\r\n            reponse =  await axios.post(`${endpoint}/api/options`, option, config)\r\n        }\r\n\r\n        return {status: true, data: reponse?.data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CForm,\r\n  CButton,\r\n  CFormLabel,\r\n  CFormInput,\r\n  CFormFeedback,\r\n  CFormSelect,\r\n  CButtonGroup,\r\n} from \"@coreui/react\";\r\n\r\nimport Select from \"react-select\";\r\n\r\nimport { Authentification } from \"../../components/index\";\r\n\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\n\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\n\r\nimport Message from \"../../components/Message\";\r\n\r\nimport { getOptionLists, addOptionList } from \"../../provider/optionListFetch\";\r\nimport { getOptions, addOption } from \"../../provider/optionFetch\";\r\n\r\nconst schemaUser = yup.object().shape({\r\n  name: yup.string().required(\"name is required\"),\r\n  description: yup.string().required(\"description is required\"),\r\n  type: yup.string().required(\"type are required\"),\r\n  options: yup.array().required(\"options are required\"),\r\n  foods: yup.array(),\r\n});\r\n\r\nconst AjoutOptionList = () => {\r\n  /** State */\r\n  const [message, setMessage] = useState(null);\r\n  const [success, setSuccess] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [optionsSelect, setOptionsSelect] = useState([]);\r\n\r\n  /** Hook Route */\r\n  let history = useHistory();\r\n  let { id } = useParams();\r\n  const paramQuery = window.location.hash;\r\n  const paramsJS = new URLSearchParams(\r\n    paramQuery.substring(paramQuery.lastIndexOf(\"?\"))\r\n  );\r\n  const foods = paramsJS.has(\"foods\") ? paramsJS.get(\"foods\") : [];\r\n  const options = paramsJS.has(\"options\") ? paramsJS.get(\"options\") : [];\r\n\r\n  console.log(\r\n    \"params\",\r\n    paramQuery.substring(paramQuery.lastIndexOf(\"?\")),\r\n    foods,\r\n    options\r\n  );\r\n\r\n  /** Form Hook */\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isValid },\r\n    resetField,\r\n    setValue,\r\n    control,\r\n  } = useForm({\r\n    resolver: yupResolver(schemaUser),\r\n    mode: \"onTouched\",\r\n    // defaultValues: { foods, options },\r\n  });\r\n\r\n  /** Run once, when the component mounts */\r\n  useEffect(() => {\r\n    console.log(\"Run once, when the component mounts \");\r\n\r\n    async function fetch() {\r\n      const resp = await getOptions(null, null);\r\n\r\n      if (resp?.status) {\r\n        setOptionsSelect([\r\n          ...resp.data.map((o) => {\r\n            return { value: o._id, label: o.name };\r\n          }),\r\n        ]);\r\n      } else {\r\n        setMessage(resp?.error);\r\n      }\r\n    }\r\n\r\n    fetch();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(\"useEffect dependency id, setValue\");\r\n\r\n    if (id) {\r\n      async function fetch() {\r\n        const resp = await getOptionLists(null, id);\r\n\r\n        if (resp?.status) {\r\n          setValue(\"name\", resp?.data.name);\r\n          setValue(\"description\", resp?.data.description);\r\n          setValue(\"type\", resp?.data.type);\r\n          setValue(\"options\", resp?.data.options);\r\n          setValue(\"foods\", resp?.data.foods);\r\n        } else {\r\n          setMessage(resp?.error);\r\n        }\r\n      }\r\n\r\n      fetch();\r\n    }\r\n  }, [id, setValue]);\r\n\r\n  const onSubmit = async (data) => {\r\n    let resp = null;\r\n    const body = { ...data, options: data.options.map((o) => o.value) };\r\n\r\n    if (isValid) {\r\n      /** reste */\r\n      setSuccess(false);\r\n      setError(false);\r\n      resp = await addOptionList(body, id);\r\n\r\n      if (resp?.data?._id) {\r\n        const options = data.options.map((o) => o.value);\r\n        for (const option of options) {\r\n          const retour = await addOption(\r\n            {\r\n              optionList: resp?.data?._id,\r\n            },\r\n            option\r\n          );\r\n          console.log(\"retour\", retour);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (resp?.status) {\r\n      /** Reset */\r\n      resetField(\"name\");\r\n      resetField(\"description\");\r\n      resetField(\"type\");\r\n      resetField(\"options\");\r\n      resetField(\"foods\");\r\n\r\n      setSuccess(true);\r\n    } else {\r\n      setError(true);\r\n      setMessage(resp?.error);\r\n    }\r\n  };\r\n\r\n  const back = () => {\r\n    history.push(`/ajout-food`);\r\n  };\r\n\r\n  // console.log(\"errors\", errors, getValues(\"options\"));\r\n\r\n  return (\r\n    <CRow>\r\n      <Authentification />\r\n      {error && <Message> {message}</Message>}\r\n      {success && <Message> {`Success Ajout ou Edite`}</Message>}\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <CRow>\r\n              <CCol sm={5}>\r\n                <strong>Ajout OptionList</strong>\r\n              </CCol>\r\n              <CCol sm={7}>\r\n                <CButtonGroup className=\"float-end me-3\">\r\n                  <CButton\r\n                    color=\"outline-secondary\"\r\n                    className=\"mx-0\"\r\n                    onClick={() => back()}\r\n                  >\r\n                    Retour\r\n                  </CButton>\r\n                </CButtonGroup>\r\n              </CCol>\r\n            </CRow>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CForm\r\n              className={`row g-3 needs-validation ${\r\n                isValid && \"was-validated\"\r\n              }`}\r\n              onSubmit={handleSubmit(onSubmit)}\r\n            >\r\n              <CCol md={6}>\r\n                <CFormLabel htmlFor=\"name\">Name</CFormLabel>\r\n                <CFormInput\r\n                  type=\"text\"\r\n                  id=\"name\"\r\n                  required\r\n                  {...register(\"name\")}\r\n                />\r\n                <CFormFeedback invalid>{errors.name?.message}</CFormFeedback>\r\n              </CCol>\r\n              <CCol md={6}>\r\n                <CFormLabel htmlFor=\"lastName\">Description</CFormLabel>\r\n                <CFormInput\r\n                  type=\"text\"\r\n                  id=\"description\"\r\n                  required\r\n                  {...register(\"description\")}\r\n                />\r\n                <CFormFeedback invalid>\r\n                  {errors.description?.message}\r\n                </CFormFeedback>\r\n              </CCol>\r\n              <CCol md={6}>\r\n                <CFormLabel htmlFor=\"type\">Type</CFormLabel>\r\n                <CFormSelect\r\n                  aria-label=\"Type\"\r\n                  id=\"type\"\r\n                  required\r\n                  {...register(\"type\")}\r\n                >\r\n                  <option>...</option>\r\n                  <option value=\"multiple\">multiple</option>\r\n                  <option value=\"single\">single</option>\r\n                </CFormSelect>\r\n                <CFormFeedback invalid>{errors.type?.message}</CFormFeedback>\r\n              </CCol>\r\n\r\n              <CCol md={6}>\r\n                <CFormLabel htmlFor=\"Options\">Options</CFormLabel>\r\n                <Controller\r\n                  control={control}\r\n                  name=\"options\"\r\n                  render={({\r\n                    field: { onChange, onBlur, value, name },\r\n                    // field,\r\n                    fieldState: { error },\r\n                  }) => (\r\n                    <>\r\n                      <Select\r\n                        defaultValue={value}\r\n                        value={value}\r\n                        name={name}\r\n                        onBlur={onBlur}\r\n                        onChange={onChange}\r\n                        // {...field}\r\n                        isMulti\r\n                        options={optionsSelect}\r\n                      />\r\n                      <small className=\"form-text text-muted\">\r\n                        <Link to={`/ajout-option`}>Ajouter une option</Link>{\" \"}\r\n                      </small>\r\n                      {error && Object.keys(error).length && (\r\n                        <div\r\n                          style={{ display: \"block\" }}\r\n                          className=\"invalid-feedback\"\r\n                        >\r\n                          {errors.options?.message}\r\n                        </div>\r\n                      )}\r\n                    </>\r\n                  )}\r\n                />\r\n              </CCol>\r\n\r\n              <CCol xs={12}>\r\n                <CButton\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className={isSubmitting ? \"disabled\" : \" \"}\r\n                >\r\n                  Submit\r\n                </CButton>\r\n              </CCol>\r\n            </CForm>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\nexport default AjoutOptionList;\r\n"],"sourceRoot":""}