{"version":3,"sources":["configs/variable.js","components/Message.js","components/Loader.js","provider/orderFetch.js","views/commandes/Commandes.js"],"names":["variable","env","endpointLocal","endpointProd","Message","variant","children","color","defaultProps","Loader","className","getOrders","a","id","status","config","headers","endpoint","url","axios","get","data","message","response","error","Commandes","useState","orders","setOrders","setError","setStatus","history","useHistory","useEffect","resp","console","log","fetch","changeStatus","xs","sm","map","value","active","onClick","scope","length","order","numero","email","moment","createdAt","format","_id","push"],"mappings":"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","file":"static/js/20.56f5f39d.chunk.js","sourcesContent":["export const variable = {\r\n    env: 'prod', // local | prod\r\n    endpointLocal: 'http://127.0.0.1:5059',\r\n    endpointProd:'https://projet-eats-nrh.herokuapp.com',\r\n}","import React from 'react'\r\nimport {CAlert} from '@coreui/react'\r\n\r\nconst Message = ({variant, children}) => {\r\n    return <CAlert color={variant}>\r\n        { children }\r\n    </CAlert>\r\n}\r\n\r\nMessage.defaultProps = {\r\n    variant: 'info'\r\n}\r\n\r\nexport default Message\r\n","import React from 'react'\r\nimport {CSpinner} from '@coreui/react'\r\n\r\nconst Loader = () => {\r\n    return <>\r\n    <CSpinner color=\"primary\" >\r\n        <span className='sr-only'>Loading ...</span>\r\n    </CSpinner>\r\n    </>\r\n}\r\n\r\nexport default Loader","import axios from 'axios'\r\nimport { variable } from '../configs/variable'\r\n\r\nexport const getOrders = async (id = null, status = null) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        let url = null\r\n\r\n        if (id) {\r\n            url = `${endpoint}/api/orders/${id}`\r\n        } else if (status) {\r\n            url = `${endpoint}/api/orders?status=${status}`\r\n        } else {\r\n            url = `${endpoint}/api/orders`\r\n        }\r\n\r\n        const { data } = await axios.get(`${url}`, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}\r\n\r\nexport const createOrders = async (body) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        const { data } = await axios.post(`${endpoint}/api/orders`, body, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}\r\n\r\nexport const sendFactureFunction = async (id) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        const { data } = await axios.get(`${endpoint}/api/facture/${id}`, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CTable,\r\n  CTableBody,\r\n  CTableDataCell,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n  CTableRow,\r\n  CButton,\r\n  CButtonGroup,\r\n} from \"@coreui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport Loader from \"../../components/Loader\";\r\nimport Message from \"../../components/Message\";\r\nimport { Authentification } from \"../../components/index\";\r\n\r\nimport { getOrders } from \"../../provider/orderFetch\";\r\n\r\nimport moment from \"moment\";\r\n\r\nconst Commandes = () => {\r\n  /** State */\r\n  const [orders, setOrders] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [status, setStatus] = useState(null);\r\n\r\n  /** Hook Route */\r\n  let history = useHistory();\r\n\r\n  /** Run once, when the component mounts */\r\n  useEffect(() => {\r\n    console.log(\"Run once, when the component mounts\");\r\n\r\n    async function fetch() {\r\n      const resp = await getOrders();\r\n\r\n      resp?.status ? setOrders([...resp?.data]) : setError(resp?.error);\r\n    }\r\n\r\n    fetch();\r\n  }, []);\r\n\r\n  const changeStatus = async (status) => {\r\n    const resp = await getOrders(null, status);\r\n\r\n    setStatus(status);\r\n\r\n    if (resp.status) {\r\n      setOrders([...resp?.data]);\r\n    }\r\n  };\r\n\r\n  const handleNavigation = (id) => {\r\n    history.push(`/detail-commande/${id}`);\r\n  };\r\n\r\n  if (orders === null) {\r\n    return <Loader />;\r\n  }\r\n\r\n  if (error) {\r\n    return <Message> {error}</Message>;\r\n  }\r\n\r\n  return (\r\n    <CRow>\r\n      <Authentification />\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <CRow>\r\n              <CCol sm={5}>\r\n                <strong>Listes des commandes</strong>\r\n              </CCol>\r\n              <CCol sm={7} className=\"d-none d-md-block\">\r\n                <CButtonGroup className=\"float-end me-3\">\r\n                  {[\"CONFIRMED\", \"READING\", \"DECLINED_BY_MERCHANT\"].map(\r\n                    (value) => (\r\n                      <CButton\r\n                        color=\"outline-secondary\"\r\n                        key={value}\r\n                        className=\"mx-0\"\r\n                        active={value === status}\r\n                        onClick={() => changeStatus(value)}\r\n                      >\r\n                        {value}\r\n                      </CButton>\r\n                    )\r\n                  )}\r\n                </CButtonGroup>\r\n              </CCol>\r\n            </CRow>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CTable>\r\n              <CTableHead>\r\n                <CTableRow>\r\n                  <CTableHeaderCell scope=\"col\">Numero</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Email</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Status</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">\r\n                    Date de creation\r\n                  </CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Actions</CTableHeaderCell>\r\n                </CTableRow>\r\n              </CTableHead>\r\n              <CTableBody>\r\n                {orders.length > 0 ? (\r\n                  orders.map((order) => (\r\n                    <CTableRow key={order._id}>\r\n                      <CTableDataCell>{order.numero}</CTableDataCell>\r\n                      <CTableDataCell>{order.email}</CTableDataCell>\r\n                      <CTableDataCell>{order.status}</CTableDataCell>\r\n                      <CTableDataCell>{moment(order.createdAt).format(\"DD/MM/YYYY H:mm\")}</CTableDataCell>\r\n                      <CTableDataCell>\r\n                        <CButton\r\n                          color={\"primary\"}\r\n                          className=\"me-1\"\r\n                          onClick={() => handleNavigation(order._id)}\r\n                        >\r\n                          {\" \"}\r\n                          Voir{\" \"}\r\n                        </CButton>\r\n                      </CTableDataCell>\r\n                    </CTableRow>\r\n                  ))\r\n                ) : (\r\n                  <h3>{\"NO Items\"}</h3>\r\n                )}\r\n              </CTableBody>\r\n            </CTable>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default Commandes;\r\n"],"sourceRoot":""}