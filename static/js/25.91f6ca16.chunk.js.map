{"version":3,"sources":["views/optionLists/AjoutOptionList.js","configs/variable.js","components/Message.js","provider/optionListFetch.js","provider/optionFetch.js"],"names":["schemaUser","yup","shape","name","required","description","type","options","AjoutOptionList","useState","message","setMessage","success","setSuccess","error","setError","optionsSelect","setOptionsSelect","history","useHistory","id","useParams","paramQuery","window","location","hash","paramsJS","URLSearchParams","substring","lastIndexOf","foods","has","get","restaurant","console","log","useForm","resolver","yupResolver","mode","register","handleSubmit","formState","errors","isSubmitting","isValid","setValue","control","useEffect","a","getOptions","resp","status","data","map","o","value","_id","label","fetch","getOptionLists","length","optionsTMP","onSubmit","body","addOptionList","option","addOption","optionList","xs","className","sm","color","onClick","push","md","htmlFor","invalid","render","field","onChange","onBlur","fieldState","defaultValue","isMulti","to","Object","keys","style","display","variable","env","endpointLocal","endpointProd","endpointFront","Message","variant","children","defaultProps","config","headers","endpoint","url","axios","response","deleteOptionList","delete","reponse","put","post","deleteOption"],"mappings":"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","file":"static/js/25.91f6ca16.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CForm,\r\n  CButton,\r\n  CFormLabel,\r\n  CFormInput,\r\n  CFormFeedback,\r\n  CFormSelect,\r\n  CButtonGroup,\r\n} from \"@coreui/react\";\r\n\r\nimport Select from \"react-select\";\r\n\r\nimport { Authentification } from \"../../components/index\";\r\n\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\n\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\n\r\nimport Message from \"../../components/Message\";\r\n\r\nimport { getOptionLists, addOptionList } from \"../../provider/optionListFetch\";\r\nimport { getOptions, addOption } from \"../../provider/optionFetch\";\r\n\r\nconst schemaUser = yup.object().shape({\r\n  name: yup.string().required(\"name is required\"),\r\n  description: yup.string().required(\"description is required\"),\r\n  type: yup.string().required(\"type are required\"),\r\n  options: yup.array().required(\"options are required\"),\r\n  // foods: yup.array(),\r\n});\r\n\r\nconst AjoutOptionList = () => {\r\n  /** State */\r\n  const [message, setMessage] = useState(null);\r\n  const [success, setSuccess] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [optionsSelect, setOptionsSelect] = useState([]);\r\n\r\n  /** Hook Route */\r\n  let history = useHistory();\r\n  let { id } = useParams();\r\n  const paramQuery = window.location.hash;\r\n  const paramsJS = new URLSearchParams(\r\n    paramQuery.substring(paramQuery.lastIndexOf(\"?\"))\r\n  );\r\n  const foods = paramsJS.has(\"foods\") ? paramsJS.get(\"foods\") : [];\r\n  const options = paramsJS.has(\"options\") ? paramsJS.get(\"options\") : [];\r\n  const restaurant = paramsJS.has(\"restaurant\") ? paramsJS.get(\"restaurant\") : null;\r\n\r\n  console.log(\r\n    \"params\",\r\n    paramQuery.substring(paramQuery.lastIndexOf(\"?\")),\r\n    foods,\r\n    options\r\n  );\r\n\r\n  /** Form Hook */\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isValid },\r\n    // resetField,\r\n    setValue,\r\n    control,\r\n  } = useForm({\r\n    resolver: yupResolver(schemaUser),\r\n    mode: \"onTouched\",\r\n    // defaultValues: { foods, options },\r\n  });\r\n\r\n  /** Run once, when the component mounts */\r\n  useEffect(() => {\r\n    console.log(\"Run once, when the component mounts \");\r\n\r\n    async function fetch() {\r\n      const resp = await getOptions(null, null);\r\n\r\n      if (resp?.status) {\r\n        setOptionsSelect([\r\n          ...resp.data.map((o) => {\r\n            return { value: o._id, label: o.name };\r\n          }),\r\n        ]);\r\n      } else {\r\n        setMessage(resp?.error);\r\n      }\r\n    }\r\n\r\n    fetch();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(\"useEffect dependency id, setValue\");\r\n\r\n    if (id) {\r\n      async function fetch() {\r\n        const resp = await getOptionLists(id);\r\n\r\n        if (resp?.status) {\r\n          setValue(\"name\", resp?.data.name);\r\n          setValue(\"description\", resp?.data.description);\r\n          setValue(\"type\", resp?.data.type);\r\n          // setValue(\"options\", resp?.data.options);\r\n          // setValue(\"foods\", resp?.data.foods);\r\n\r\n          if (resp?.data.options) {\r\n            if (resp?.data.options.length) {\r\n              /** options */\r\n              const optionsTMP = resp?.data.options.map((o) => {\r\n                return { value: o._id, label: o.name }\r\n              })\r\n              setValue('options', optionsTMP)\r\n            }\r\n          }\r\n        } else {\r\n          setMessage(resp?.error);\r\n        }\r\n      }\r\n\r\n      fetch();\r\n    }\r\n  }, [id, setValue]);\r\n\r\n  const onSubmit = async (data) => {\r\n    let resp = null;\r\n    const body = { ...data, options: data.options.map((o) => o.value) };\r\n\r\n    if (isValid) {\r\n      /** reste */\r\n      setSuccess(false);\r\n      setError(false);\r\n      resp = await addOptionList(body, id);\r\n\r\n      if (resp?.data?._id) {\r\n        const options = data.options.map((o) => o.value);\r\n        for (const option of options) {\r\n          await addOption(\r\n            {\r\n              optionList: resp?.data?._id,\r\n            },\r\n            option\r\n          );\r\n          // console.log(\"retour\", retour);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (resp?.status) {\r\n      /** Reset */\r\n      // resetField(\"name\");\r\n      // resetField(\"description\");\r\n      // resetField(\"type\");\r\n      // resetField(\"options\");\r\n      // resetField(\"foods\");\r\n\r\n      setSuccess(true);\r\n    } else {\r\n      setError(true);\r\n      setMessage(resp?.error);\r\n    }\r\n  };\r\n\r\n  const back = () => {\r\n    if (id) {\r\n      history.push(`/option-list/${id}?restaurant=${restaurant}`)\r\n    } else {\r\n      history.push(`/ajout-food`);\r\n    }\r\n    \r\n  };\r\n\r\n  // console.log(\"errors\", errors, getValues(\"options\"));\r\n\r\n  return (\r\n    <CRow>\r\n      <Authentification />\r\n      {error && <Message> {message}</Message>}\r\n      {success && <Message> {`Success Ajout ou Edite`}</Message>}\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>\r\n            <CRow>\r\n              <CCol sm={5}>\r\n                <strong>Ajout OptionList</strong>\r\n              </CCol>\r\n              <CCol sm={7}>\r\n                <CButtonGroup className=\"float-end me-3\">\r\n                  <CButton\r\n                    color=\"outline-secondary\"\r\n                    className=\"mx-0\"\r\n                    onClick={() => back()}\r\n                  >\r\n                    Retour\r\n                  </CButton>\r\n                </CButtonGroup>\r\n              </CCol>\r\n            </CRow>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CForm\r\n              className={`row g-3 needs-validation ${\r\n                isValid && \"was-validated\"\r\n              }`}\r\n              onSubmit={handleSubmit(onSubmit)}\r\n            >\r\n              <CCol md={6}>\r\n                <CFormLabel htmlFor=\"name\">Name</CFormLabel>\r\n                <CFormInput\r\n                  type=\"text\"\r\n                  id=\"name\"\r\n                  required\r\n                  {...register(\"name\")}\r\n                />\r\n                <CFormFeedback invalid>{errors.name?.message}</CFormFeedback>\r\n              </CCol>\r\n              <CCol md={6}>\r\n                <CFormLabel htmlFor=\"lastName\">Description</CFormLabel>\r\n                <CFormInput\r\n                  type=\"text\"\r\n                  id=\"description\"\r\n                  required\r\n                  {...register(\"description\")}\r\n                />\r\n                <CFormFeedback invalid>\r\n                  {errors.description?.message}\r\n                </CFormFeedback>\r\n              </CCol>\r\n              <CCol md={6}>\r\n                <CFormLabel htmlFor=\"type\">Type</CFormLabel>\r\n                <CFormSelect\r\n                  aria-label=\"Type\"\r\n                  id=\"type\"\r\n                  required\r\n                  {...register(\"type\")}\r\n                >\r\n                  <option>...</option>\r\n                  <option value=\"multiple\">multiple</option>\r\n                  <option value=\"single\">single</option>\r\n                </CFormSelect>\r\n                <CFormFeedback invalid>{errors.type?.message}</CFormFeedback>\r\n              </CCol>\r\n\r\n              <CCol md={6}>\r\n                <CFormLabel htmlFor=\"Options\">Options</CFormLabel>\r\n                <Controller\r\n                  control={control}\r\n                  name=\"options\"\r\n                  render={({\r\n                    field: { onChange, onBlur, value, name },\r\n                    // field,\r\n                    fieldState: { error },\r\n                  }) => (\r\n                    <>\r\n                      <Select\r\n                        defaultValue={value}\r\n                        value={value}\r\n                        name={name}\r\n                        onBlur={onBlur}\r\n                        onChange={onChange}\r\n                        // {...field}\r\n                        isMulti\r\n                        options={optionsSelect}\r\n                      />\r\n                      <small className=\"form-text text-muted\">\r\n                        <Link to={`/ajout-option`}>Ajouter une option</Link>{\" \"}\r\n                      </small>\r\n                      {error && Object.keys(error).length && (\r\n                        <div\r\n                          style={{ display: \"block\" }}\r\n                          className=\"invalid-feedback\"\r\n                        >\r\n                          {errors.options?.message}\r\n                        </div>\r\n                      )}\r\n                    </>\r\n                  )}\r\n                />\r\n              </CCol>\r\n\r\n              <CCol xs={12}>\r\n                <CButton\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className={isSubmitting ? \"disabled\" : \" \"}\r\n                >\r\n                  Submit\r\n                </CButton>\r\n              </CCol>\r\n            </CForm>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\nexport default AjoutOptionList;\r\n","export const variable = {\r\n    env: 'prod', // local | prod\r\n    endpointLocal: 'http://127.0.0.1:5059',\r\n    endpointProd:'https://projet-eats-nrh.herokuapp.com',\r\n    endpointFront:'http://localhost:3232',\r\n}","import React from 'react'\r\nimport {CAlert} from '@coreui/react'\r\n\r\nconst Message = ({variant, children}) => {\r\n    return <CAlert color={variant}>\r\n        { children }\r\n    </CAlert>\r\n}\r\n\r\nMessage.defaultProps = {\r\n    variant: 'info'\r\n}\r\n\r\nexport default Message\r\n","import axios from 'axios'\r\nimport { variable } from '../configs/variable'\r\n\r\nexport const getOptionLists = async (id = null) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        const url  = id ? `${endpoint}/api/optionLists/${id}` : `${endpoint}/api/optionLists`\r\n\r\n        const { data } = await axios.get(`${url}`, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}\r\n\r\nexport const deleteOptionList = async (id) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        \r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        const { data } = await axios.delete(`${endpoint}/api/optionLists/${id}`, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}\r\n\r\nexport const addOptionList = async (optionList, id = null) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        let reponse = null\r\n\r\n        if (id) {\r\n            reponse =  await axios.put(`${endpoint}/api/optionLists/${id}`, optionList, config)\r\n        } else {\r\n            reponse =  await axios.post(`${endpoint}/api/optionLists`, optionList, config)\r\n        }\r\n\r\n        return {status: true, data: reponse?.data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}","import axios from 'axios'\r\nimport { variable } from '../configs/variable'\r\n\r\nexport const getOptions = async (id = null) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        const url  = id ? `${endpoint}/api/options/${id}` : `${endpoint}/api/options`\r\n\r\n        const { data } = await axios.get(`${url}`, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}\r\n\r\nexport const deleteOption = async (id) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        \r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        const { data } = await axios.delete(`${endpoint}/api/options/${id}`, config)\r\n\r\n        return {status: true, data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}\r\n\r\nexport const addOption = async (option, id = null) => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const endpoint = variable.env === 'local' ? variable.endpointLocal : variable.endpointProd\r\n\r\n        let reponse = null\r\n\r\n        if (id) {\r\n            reponse =  await axios.put(`${endpoint}/api/options/${id}`, option, config)\r\n        } else {\r\n            reponse =  await axios.post(`${endpoint}/api/options`, option, config)\r\n        }\r\n\r\n        return {status: true, data: reponse?.data}\r\n    } catch (error) {\r\n        const message = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        \r\n        return {status: false, error: message}\r\n    }\r\n}"],"sourceRoot":""}